@mixin row() {
  display: flex;
  flex-direction: column;
  width: 100%;
}

@mixin image-background() {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;

  img,
  video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

.image-background {
  @include image-background();
}

@mixin absolute() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

/*  */


@mixin default-font() {
  font-family: $default-font;
}

@mixin h1 {
  font-size: map-get($font-sizes, h1);
  font-family: $secondary-font;
  font-weight: 700;
  line-height: 0.80;

  @include responsive('tablet-h') {
    font-size: map-get($font-sizes-tablet, h1);
  }

  @include responsive('mobile-v') {
    font-size: map-get($font-sizes-mobile, h1);
  }
}

@mixin h2 {
  font-size: map-get($font-sizes, h2);
  font-family: $secondary-font;
  font-weight: 700;
  line-height: 0.86;

  @include responsive('tablet-h') {
    font-size: map-get($font-sizes-tablet, h2);
  }

  @include responsive('mobile-v') {
    font-size: map-get($font-sizes-mobile, h2);
  }
}

@mixin h3 {
  font-size: map-get($font-sizes, h3);
  font-family: $secondary-font;
  font-weight: 700;
  line-height: 0.90;

  @include responsive('tablet-h') {
    font-size: map-get($font-sizes-tablet, h3);
  }

  @include responsive('mobile-v') {
    font-size: map-get($font-sizes-mobile, h3);
  }
}

@mixin h4 {
  font-size: map-get($font-sizes, h4);
  font-family: $secondary-font;
  font-weight: 500;
  line-height: 1.2;

  @include responsive('tablet-h') {
    font-size: map-get($font-sizes-tablet, h4);
  }

  @include responsive('mobile-v') {
    font-size: map-get($font-sizes-mobile, h4);
  }
}

@mixin h5 {
  font-size: map-get($font-sizes, h5);
  font-family: $secondary-font;
  font-weight: 500;
  line-height: 1.2;

  @include responsive('tablet-h') {
    font-size: map-get($font-sizes-tablet, h5);
  }

  @include responsive('mobile-v') {
    font-size: map-get($font-sizes-mobile, h5);
  }
}

@mixin h6 {
  font-size: map-get($font-sizes, h6);
  font-family: $default-font;
  font-weight: 400;
  line-height: 1.25;

  @include responsive('tablet-h') {
    font-size: map-get($font-sizes-tablet, h6);
  }

  @include responsive('mobile-v') {
    font-size: map-get($font-sizes-mobile, h6);
  }
}

@mixin h7 {
  font-size: map-get($font-sizes, h7);
  font-family: $default-font;

  @include responsive('tablet-h') {
    font-size: map-get($font-sizes-tablet, h7);
  }

  @include responsive('mobile-v') {
    font-size: map-get($font-sizes-mobile, h7);
  }
}

@mixin h8 {
  font-size: map-get($font-sizes, h8);
  font-family: $default-font;
  line-height: 1;

  @include responsive('tablet-h') {
    font-size: map-get($font-sizes-tablet, h8);
  }

  @include responsive('mobile-v') {
    font-size: map-get($font-sizes-mobile, h8);
  }
}


// Media Query Map
@mixin responsive($width) {
  @if map-has-key($breakpoints, $width) {
    $width: map-get($breakpoints, $width);

    @media only screen and (max-width: $width) {
      @content;
    }
  }

  @else {
    @warn "No value could be retrieved from `#{$width}`. Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// Media Query Map
@mixin responsiveMin($width) {
  @if map-has-key($breakpoints, $width) {
    $width: map-get($breakpoints, $width);

    @media only screen and (min-width: $width) {
      @content;
    }
  }

  @else {
    @warn "No value could be retrieved from `#{$width}`. Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/*
tr( duracion, propiedades, delay)
*/
@mixin tr($d: 0.5s, $e: all, $delay: 0s) {
  transition: $e $d ease-out;
  transition-delay: $delay;
}


/*
tre( duracion, propiedades, delay)
a diferencia de tr(), tre tiene un easign aplicado que hace la animacion mas natural
*/
@mixin tre($d: 0.5s, $e: all, $delay: 0s) {
  transition: $e $d cubic-bezier(0.165, 0.840, 0.440, 1.000);
  transition-delay: $delay;
}

/*
fade( x, y );
AÃ±ade transformacion x e y, y opacity 0 al elemento.
Se pueden pasar valores negativos, por ejemplo, para desplazar x hacia la izquierda
Tambien se puede pasar un porcentaje
*/
@mixin fade($x: 0px, $y: 0px, $transition: true, $delay: 0) {
  opacity: var(--fade-opacity, 0);
  transform: var(--fade-transform, translateX($x) translateY($y));

  @if $transition {
    transition: $transition-default;
  }

  @if $delay >0 {
    transition-delay: $transition-default-delay * $delay;
  }

}

.in {
  --fade-opacity: 1;
  --fade-transform: translateX(0px) translateY(0px);
  --p100: 100%;
  --v1: 1;
}

/*
fadein();
Aplica transformX(0px), transformY(0px) y opacity 1 para hacer aparecer el objecto
*/
@mixin fadein() {
  opacity: 1;
  transform: translateX(0px) translateY(0px);
}


@function clamp-calc($min-width, $max-width, $size-at-min-width, $size-at-max-width) {
  $slope: ($size-at-max-width - $size-at-min-width) / ($max-width - $min-width);
  $slope: round($slope * 1000) / 1000;
  $y-axis-intersection: -1 * $min-width * $slope +$size-at-min-width;
  $y-axis-intersection: round($y-axis-intersection * 1000) / 1000;
  $return-value: clamp(#{$size-at-min-width}, #{$y-axis-intersection} + #{$slope} * 100vw, #{$size-at-max-width});
  @return $return-value;
}

@function rv($small, $large ) {
  @return clamp-calc(map-get($breakpoints, 'mobile-v'), map-get($breakpoints, 'tablet-h'), $small, $large );
}